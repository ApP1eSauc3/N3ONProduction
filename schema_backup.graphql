type User 
  @model 
  @auth(rules: [
    { allow: groups, groups: ["venueOwnerGroup", "djGroup", "userGroup"] }
  ]) {
  id: ID!
  username: String!
  messages: [Message] @hasMany(fields: ["id"]) # Define the one-to-many relationship
}

type ChatRoom 
  @model 
  @auth(rules: [
    { allow: owner }, 
    { allow: groups, groups: ["Users"] }
  ]) {
  id: ID!
  name: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  participants: [String] # List of participant usernames or IDs
  messages: [Message] @hasMany(fields: ["id"]) # Relationship between ChatRoom and Message
}

type Message 
  @model 
  @auth(rules: [
    { allow: owner, operations: [create, update, delete] },
    { allow: groups, groups: ["Users"], operations: [read] }
  ]) {
  id: ID!
  senderID: ID! # Foreign key for sender
  sender: User @belongsTo(fields: ["senderID"]) # Connect each message to a user
  chatRoomID: ID! @index(name: "byChatRoom", sortKeyFields: ["timestamp"]) # Foreign key for ChatRoom
  content: String!
  timestamp: AWSDateTime!
  isRead: Boolean!
}
